import collections
import heapq

# [[0, 3], [1, 9], [2, 6]]    9
# [[1, 9], [1, 4], [1, 5], [1, 7], [1, 3]]    13
# [[0, 9], [0, 4], [0, 5], [0, 7], [0, 3]]    13
# [[0, 3], [0, 1], [4, 7]]    4
# [[0, 9], [0, 4], [0, 5], [0, 7], [0, 3]]    13
# [[0, 1], [0, 1], [1, 0]]    1
# [[0, 5], [1, 2], [5, 5]]    6
# [[0, 9], [0, 4], [0, 5], [0, 7], [0, 3]]    13
# [[0, 1], [1, 2], [500, 6]]      3
# [[0, 10], [4, 10], [5, 11], [15, 2]]    15
# [[0, 10]]   10
# [[1, 10], [3, 3], [10, 3]]      9
# [[0, 10], [2, 3], [9, 3]]   9
# [[0, 3], [4, 3], [10, 3]]   3
# [[0, 10], [2, 10], [25, 10], [25, 2]]   10
# [[0, 3], [1, 9], [2, 6], [4, 3]]    9
# [[0, 4], [0, 3], [0, 2], [0, 1]]    5
# [[24, 10], [28, 39], [43, 20], [37, 5], [47, 22], [20, 47], [15, 34], [15, 2], [35, 43], [26, 1]]   72
# [[0, 10], [4, 10], [15, 2], [5, 11]]    15

def solution(jobs):
    now, i= 0, 0
    last = -1
    tasks = []
    answer = []
    # 작업 종료 조건은 작업을 전부 처리 할때까지
    while(i < len(jobs)):
        # 현재 시점에서 처리 할 수 있는 것들을 모두 힙에 넣는다. 이미 넣은건 제외
        for time, duration in jobs:
            if last < time <= now:
                heapq.heappush(tasks, (duration, time))
        if len(tasks) > 0:
            # 작업 처리, 가장 짧게 걸리는걸 꺼내서 종료시간으로부터 기다린 시간을 빼고 정답에 넣는다.
            last = now
            current_task = heapq.heappop(tasks)
            now += current_task[0]
            answer.append(now-current_task[1])
            i += 1
        else:
            now += 1
    return sum(answer)//len(jobs)